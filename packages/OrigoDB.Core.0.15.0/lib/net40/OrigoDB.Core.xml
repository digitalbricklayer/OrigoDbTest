<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrigoDB.Core</name>
    </assembly>
    <members>
        <member name="T:OrigoDB.Core.IEngine`1">
            <summary>
            An engine executes commands and queries
            </summary>
        </member>
        <member name="M:OrigoDB.Core.IEngine`1.Execute``1(OrigoDB.Core.Query{`0,``0})">
            <summary>
            Execute a query
            </summary>
        </member>
        <member name="M:OrigoDB.Core.IEngine`1.Execute(OrigoDB.Core.Command{`0})">
            <summary>
            Execute a command with no result
            </summary>
        </member>
        <member name="M:OrigoDB.Core.IEngine`1.Execute``1(OrigoDB.Core.Command{`0,``0})">
            <summary>
            Execute a command that returns results
            </summary>
        </member>
        <member name="T:OrigoDB.Core.ClusterExecuteResponse">
            <summary>
            Execution response from server with the result as payload.
            Also notifies clients if there is a change in the Cluster.
            </summary>
        </member>
        <member name="T:OrigoDB.Core.PartitionClient`1">
            <summary>
            ClusterClient that performs client side partitioning
            </summary>
        </member>
        <member name="M:OrigoDB.Core.PartitionClient`1.SetDispatcherFor``1(System.Func{``0,System.Int32})">
            <summary>
            Associate a command or query type with a single node dispatcher.
            The dispatcher takes an instance of T and returns the id of the node to dispatch to
            </summary>
        </member>
        <member name="M:OrigoDB.Core.PartitionClient`1.SetDispatcherFor``1(System.Func{``0,System.Int32[]})">
            <summary>
            Associate a command or query type with a multinode dispatcher.
            The dispatcher takes an instance of T and returns an array of ids to dispatch to.
            </summary>
        </member>
        <member name="M:OrigoDB.Core.PartitionClient`1.SetMergerFor``2(System.Func{``1[],``1})">
            <summary>
            Associate a merger with a transaction type.
            A merger merges results from multiple nodes into a single result
            </summary>
            <typeparam name="TTransaction"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="merger"></param>
        </member>
        <member name="M:OrigoDB.Core.PartitionClient`1.SetMergerFor``1(System.Func{``0[],``0})">
            <summary>
            Associate a merger with a specific result type.
            </summary>
        </member>
        <member name="M:OrigoDB.Core.PartitionClient`1.Execute``1(OrigoDB.Core.Query{`0,``0})">
            <summary>
            Dispatch the query to the appropriate nodes and merge the results with a merger
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="query"></param>
            <returns>The merged result</returns>
        </member>
        <member name="M:OrigoDB.Core.PartitionClient`1.Execute(OrigoDB.Core.Command{`0})">
            <summary>
            Dispatch a command to the appropriate nodes
            </summary>
            <param name="command">the command to execute</param>
        </member>
        <member name="M:OrigoDB.Core.PartitionClient`1.Execute``1(OrigoDB.Core.Command{`0,``0})">
            <summary>
            Dispatch a command and merge the results
            </summary>
        </member>
        <member name="M:OrigoDB.Core.PartitionClient`1.Execute``1(OrigoDB.Core.Query{`0,``0},System.Int32)">
            <summary>
            Execute a query on a specific node
            </summary>
        </member>
        <member name="M:OrigoDB.Core.PartitionClient`1.Execute(OrigoDB.Core.Command{`0},System.Int32)">
            <summary>
            Execute on a specific node
            </summary>
        </member>
        <member name="M:OrigoDB.Core.PartitionClient`1.Execute``1(OrigoDB.Core.Command{`0,``0},System.Int32)">
            <summary>
            Execute on a specific node
            </summary>
        </member>
        <member name="T:OrigoDB.Core.RemoteEngineClient`1">
            <summary>
            An IEngine implementation that communicates with a remote OrigoDB server
            </summary>
        </member>
        <member name="T:OrigoDB.Core.CommandExecutedEventArgs">
            <summary>
            A command has just executed
            </summary>
        </member>
        <member name="F:OrigoDB.Core.CommandExecutedEventArgs.JournalEntryId">
            <summary>
            Id of the journal entry or 0 if journaling is disabled
            </summary>
        </member>
        <member name="T:OrigoDB.Core.CommandExecutingEventArgs">
            <summary>
            A command is about to be executed
            </summary>
        </member>
        <member name="F:OrigoDB.Core.CommandExecutingEventArgs.Command">
            <summary>
            The command about to be executed
            </summary>
        </member>
        <member name="P:OrigoDB.Core.CommandExecutingEventArgs.Cancel">
            <summary>
            If set to true by any listener the command will be aborted
            </summary>
        </member>
        <member name="T:OrigoDB.Core.CommandFailedException">
            <summary>
            The command threw an unexpected exception
            </summary>
        </member>
        <member name="M:OrigoDB.Core.CommandFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Needed to deserialize because Exception implements ISerializable
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Test.ConfigurationExtensions">
            <summary>
            Some extensions to aid setting up for test
            </summary>
        </member>
        <member name="T:OrigoDB.Core.TeenyIoc">
            <summary>
            A simple IOC registry used by the EngineConfiguration to handle modules
            </summary>
        </member>
        <member name="M:OrigoDB.Core.TeenyIoc.Register``1(System.Func{OrigoDB.Core.TeenyIoc.Args,``0},System.String)">
            <summary>
            Register a factory, pass a name to create a named registration
            </summary>
        </member>
        <member name="M:OrigoDB.Core.TeenyIoc.Resolve``1(System.String)">
            <summary>
            Invokes the factory function registered for type T and a specific name
            </summary>
        </member>
        <member name="M:OrigoDB.Core.TeenyIoc.Resolve``1(OrigoDB.Core.TeenyIoc.Args,System.String)">
            <summary>
            Invoke factory function registered for type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args">optional args to the factory function</param>
            <param name="name">optional named registration</param>
            <returns>the result of invoking the factory</returns>
        </member>
        <member name="T:OrigoDB.Core.TeenyIoc.Args">
            <summary>
            Arguments can be passed during resolution
            </summary>
        </member>
        <member name="T:OrigoDB.Core.JournalAppender">
            <summary>
            Wraps objects in JournalEntry and sends to an underlying writer.
            Responsible for maintaining the sequence number.
            </summary>
        </member>
        <member name="M:OrigoDB.Core.JournalAppender.#ctor(System.UInt64,OrigoDB.Core.IJournalWriter)">
            <summary>
            Constructor
            </summary>
            <param name="nextEntryId"></param>
            <param name="writer">The underlying writer</param>
        </member>
        <member name="M:OrigoDB.Core.JournalAppender.Append(OrigoDB.Core.Command)">
            <summary>
            Append an object to the journal wrapped with a JournalEntry
            </summary>
            <returns>The id of the entry appended</returns>
        </member>
        <member name="M:OrigoDB.Core.JournalAppender.AppendModelCreated(System.Type)">
            <summary>
            Append an entry of type ModelCreated to the journal
            </summary>
            <param name="modelType"></param>
        </member>
        <member name="M:OrigoDB.Core.JournalAppender.AppendModelCreated``1">
            <summary>
            Append an entry of type ModelCreated to the journal
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OrigoDB.Core.JournalAppender.AppendRollbackMarker">
            <summary>
            Rollback the previous command by writing a rollback marker.
            <remarks>Uses the same id as the rollbacked command to not break the sequence</remarks>
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Journaling.ModelCreated">
            <summary>
            Used to initiate the model during restore when no snapshot is present.
            </summary>
        </member>
        <member name="F:OrigoDB.Core.PersistenceMode.Journaling">
            <summary>
            Default, write each command to the journal before applying to the model
            </summary>
        </member>
        <member name="F:OrigoDB.Core.PersistenceMode.SnapshotPerTransaction">
            <summary>
            No journaling, write a snapshot for each command.
            </summary>
        </member>
        <member name="F:OrigoDB.Core.PersistenceMode.ManualSnapshots">
            <summary>
            Take a snapshot on demand
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Proxy.CommandAttribute">
            <summary>
            Used to mark non-void methods as commands so they won't be interpreted as queries.
            Can also be used to map methods to a domain specific command type
            </summary>
        </member>
        <member name="P:OrigoDB.Core.Proxy.ProxyAttribute.CloneResult">
            <summary>
            Result of this method call will be cloned unless immutable.
            </summary>
        </member>
        <member name="P:OrigoDB.Core.Proxy.ProxyAttribute.MapTo">
            <summary>
            Map to an explict Command or Query type or the generic proxy types if null
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Proxy.NoProxyAttribute">
            <summary>
            Explicitly disallow when proxying, invocation will throw an Exception if called through the proxy
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Storage.Snapshot">
            <summary>
            Snapshot metadata
            </summary>
        </member>
        <member name="F:OrigoDB.Core.Storage.Snapshot.Created">
            <summary>
            Point in time when snapshot was taken
            </summary>
        </member>
        <member name="F:OrigoDB.Core.Storage.Snapshot.Revision">
            <summary>
            The Revision of the Model
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Storage.SnapshotStore">
            <summary>
            Base class for concrete Snapshot store implementations
            </summary>
        </member>
        <member name="M:OrigoDB.Core.ISnapshotStore.WriteSnapshot(OrigoDB.Core.Model)">
            <summary>
            Create a snapshot of the provided model and save to storage
            </summary>
        </member>
        <member name="M:OrigoDB.Core.ISnapshotStore.Initialize">
            <summary>
            Connect and read meta data
            </summary>
        </member>
        <member name="P:OrigoDB.Core.ISnapshotStore.Snapshots">
            <summary>
            Snapshot metadata
            </summary>
        </member>
        <member name="P:OrigoDB.Core.ISnapshotStore.IsEmpty">
            <summary>
            No shapshots in the store 
            </summary>
        </member>
        <member name="M:OrigoDB.Core.FormatterExtensions.WriteBuffered(System.Runtime.Serialization.IFormatter,System.IO.Stream,System.Object)">
            <summary>
            Avoid corruption by serializing in memory and
            then writing to the underlying stream.
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Storage.ModelLoader">
            <summary>
            Knows how to rebuild a model from snapshot and/or journal storage
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Storage.NullWriteStream">
            <summary>
            A writeable stream which ignores the bytes written
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Command`1">
            <summary>
            A command modifies the state of the model.
            </summary>
            <typeparam name="TModel">The specific type of the model, derived from Model</typeparam>
        </member>
        <member name="T:OrigoDB.Core.Command">
            <summary>
            A command modifies the state of the model. 
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Command.Abort(System.String,System.Exception)">
            <summary>
            Gracefully cancels command execution by throwing a CommandAbortedException.
            The engine will rethrow the exception and proceed normally.
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Command.PrepareStub(OrigoDB.Core.Model)">
            <summary>
            Perform read operations before the write lock is obtained.
            </summary>
            <param name="model"></param>
        </member>
        <member name="P:OrigoDB.Core.Command.Timestamp">
            <summary>
            Point in time of command execution. A safe alternative to DateTime.Now
            <remarks>Will be assigned when executed by engine</remarks>
            </summary>
        </member>
        <member name="T:OrigoDB.Core.IOperationWithResult">
            <summary>
            Shared by Query and CommandWithResult
            </summary>
        </member>
        <member name="P:OrigoDB.Core.IOperationWithResult.ResultIsSafe">
            <summary>
            True if results are safe to return to client, default is false.
            Set to true if your command implementation gaurantees no references to
            mutable objects within the model are returned.
            </summary>
        </member>
        <member name="P:OrigoDB.Core.Command`2.ResultIsSafe">
            <summary>
            True if results are safe to return to client, default is false. Set to true if your command implementation 
            gaurantees no references to mutable objects within the model are returned.
            </summary>
        </member>
        <member name="T:OrigoDB.Core.ClientConfiguration.ModeSetting">
            <summary>
            Used as a container for the enum so we can use the DictionaryMapper
            </summary>
        </member>
        <member name="F:OrigoDB.Core.CompressionMethod.None">
            <summary>
            Default, no compression
            </summary>
        </member>
        <member name="F:OrigoDB.Core.CompressionMethod.GZip">
            <summary>
            Use .NET Gzip compression
            <remarks>Unsupported at the moment</remarks>
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Configuration.Kernels">
            <summary>
            Configuration property deciding which type of <see cref="T:OrigoDB.Core.Kernel"/> to use.
            </summary>
        </member>
        <member name="F:OrigoDB.Core.Configuration.Kernels.Optimistic">
            <summary>
            Execute commands after writing to the journal, see <see cref="T:OrigoDB.Core.OptimisticKernel"/>
            </summary>
        </member>
        <member name="F:OrigoDB.Core.Configuration.Kernels.RoyalFoodTaster">
            <summary>
            Test commands on a copy of the model before applying to the real model, see <see cref="T:OrigoDB.Core.RoyalFoodTaster"/>
            </summary>
        </member>
        <member name="P:OrigoDB.Core.RemoteClientConfiguration.MaxConnections">
            <summary>
            Maximum number of open Tcp connections to Host per pool.
            </summary>
        </member>
        <member name="M:OrigoDB.Core.StorageLocation.GetDefaultDirectory">
            <summary>
            The default directory to use if the Location is relative
            </summary>
            <returns></returns>
        </member>
        <member name="P:OrigoDB.Core.FileStorageLocation.OfJournal">
            <summary>
            The location of the command journal files. A directory path when using FileStorage, 
            a connection string when using SqlStorage.
            Assigning a relative path will resolve to current directory or App_Data if running in a web context
            </summary>
        </member>
        <member name="P:OrigoDB.Core.FileStorageLocation.RelativeLocation">
            <summary>
            Gets the location without combining to an absolute location relative to the default directory
            </summary>
        </member>
        <member name="P:OrigoDB.Core.FileStorageLocation.OfSnapshots">
            <summary>
            Same as Journal unless specifically set
            </summary>
        </member>
        <member name="P:OrigoDB.Core.FileStorageLocation.HasAlternativeSnapshotLocation">
            <summary>
            True if the snapshotlocation differs from the location of the journal
            </summary>
        </member>
        <member name="T:OrigoDB.Core.OptimisticKernel">
            <summary>
            An optimistic kernel writes to the log before aquiring the
            write lock and applying the command to the model. If the
            command fails a rollback marker is written to the log and
            the system is rolled back by doing a full restore.
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Kernel">
            <summary>
            The kernel coordinates concurrent access to the
            model and executes commands and queries
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Kernel.EnsureNoMutableReferences(System.Object@,OrigoDB.Core.IOperationWithResult)">
            <summary>
            Make sure we don't return direct references to mutable objects within the model
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Kernel.Read``1(System.Func{OrigoDB.Core.Model,``0})">
            <summary>
            Provide synchronized read access to the model
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="readAction"></param>
            <returns></returns>
        </member>
        <member name="M:OrigoDB.Core.Kernel.Read(System.Action{OrigoDB.Core.Model})">
            <summary>
            Provides synchronized read access to the model
            </summary>
            <param name="readAction"></param>
        </member>
        <member name="T:OrigoDB.Core.IImmutabilityCommand">
            <summary>
            The foundation of immutable commands
            </summary>
        </member>
        <member name="M:OrigoDB.Core.IImmutabilityCommand.Execute(OrigoDB.Core.Model)">
            <summary>
            An immutable model can only be replaced by a new model, never mutated
            </summary>
            <param name="model">The state before the command</param>
            <returns>The state after the command</returns>
        </member>
        <member name="M:OrigoDB.Core.IImmutabilityCommandWithResult.Execute(OrigoDB.Core.Model)">
            <summary>
            Execute a command that returns results
            </summary>
            <param name="model">The initial state</param>
            <returns>a new model reflecting the modified state and a result</returns>
        </member>
        <member name="T:OrigoDB.Core.ImmutabilityCommand`1">
            <summary>
            Base class for commands supporting immutable model mode
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="P:OrigoDB.Core.Query.ResultIsSafe">
            <summary>
            True if results are safe to return to client, default is false. Set to true if your command implementation 
            gaurantees no references to mutable objects within the model are returned.
            </summary>
            todo: name is lame
        </member>
        <member name="T:OrigoDB.Core.Test.InMemoryCommandStore">
            <summary>
            The InMemoryCommandStore is a non durable CommandStore implementation
            intended for tests
            </summary>
        </member>
        <member name="T:OrigoDB.Core.ICommandStore">
            <summary>
            Storage provider for the command journal
            </summary>
        </member>
        <member name="M:OrigoDB.Core.ICommandStore.Initialize">
            <summary>
            Connect and read meta data
            </summary>
        </member>
        <member name="M:OrigoDB.Core.ICommandStore.GetJournalEntries">
            <summary>
            Retrieve all of the journal entries
            </summary>
            <returns></returns>
        </member>
        <member name="M:OrigoDB.Core.ICommandStore.GetJournalEntriesFrom(System.UInt64)">
            <summary>
            Retrieve journal entries with an Id >= the given entryId.
            </summary>
        </member>
        <member name="M:OrigoDB.Core.ICommandStore.GetJournalEntriesBeforeOrAt(System.DateTime)">
            <summary>
            Return journal entries at or before a specific point in time.
            </summary>
            <param name="pointInTime"></param>
            <returns></returns>
        </member>
        <member name="M:OrigoDB.Core.ICommandStore.CreateJournalWriter(System.UInt64)">
            <summary>
            Create a journal writer capable of writing Journal entries to the store
            </summary>
            <param name="nextRevision"></param>
            <returns></returns>
        </member>
        <member name="M:OrigoDB.Core.ICommandStore.CommandEntriesFrom(System.UInt64)">
            <summary>
            Retrieve entries of type committed command, other entry types and rollbacked commands are filtered out.
            </summary>
            <param name="entryId">Start reading from this position</param>
        </member>
        <member name="M:OrigoDB.Core.ICommandStore.CommandEntries">
            <summary>
            Retrieve entries of type committed command, other entry types and rollbacked commands are filtered out.
            </summary>
        </member>
        <member name="P:OrigoDB.Core.ICommandStore.IsEmpty">
            <summary>
            No journal entries in the store
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Storage.CommandStore.CommandEntriesFrom(System.UInt64)">
            <summary>
            Get commands beginning from a specific entry id (inclusive)
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Storage.CommandStore.CommandEntriesFrom(System.DateTime)">
            <summary>
            Get non rolled back commands from a point in time
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Storage.CommandStore.CommittedCommandEntries(System.Func{System.Collections.Generic.IEnumerable{OrigoDB.Core.JournalEntry}})">
            <summary>
            Select the items of type Command that are not followed by a rollback marker
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Storage.CommandStore.CommandEntries">
            <summary>
            Get the complete sequence of commands skipping any that were rolled back
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Test.InMemoryCommandStore.InMemoryCommandStoreState">
            <summary>
            Memento pattern
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Journaling.RollbackMarker">
            <summary>
            Journal entry following a failed command
            </summary>
        </member>
        <member name="T:OrigoDB.Core.DelegateQuery`2">
            <summary>
            Wrapper class for Lambda queries. 
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Engine">
            <summary>
            Engine is responsible for executing commands and queries against
            the model while conforming to ACID.
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Engine.GetModel">
            <summary>
            DANGER! Get a direct reference to the encapsulated model. DANGER!
            <remarks>
            Under normal circumstances you will never touch the model directly. Access is not thread safe and
            any changes will be lost unless a snapshot is taken.
            </remarks>
            </summary>
            <returns>A direct reference to the model</returns>
        </member>
        <member name="M:OrigoDB.Core.Engine.Execute(OrigoDB.Core.Query)">
            <summary>
            Non generic query execution overload
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:OrigoDB.Core.Engine.Execute``2(System.Func{``0,``1})">
            <summary>
            Execute a lambda query
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="lambdaQuery"></param>
            <returns></returns>
        </member>
        <member name="M:OrigoDB.Core.Engine.WriteSnapshotToStream(System.IO.Stream,System.Runtime.Serialization.IFormatter)">
            <summary>
            Serialize the current model to a stream
            </summary>
            <param name="stream">A writeable stream</param>
            <param name="formatter">A specific formatter, otherwise the default formatter</param>
        </member>
        <member name="M:OrigoDB.Core.Engine.CreateSnapshot">
            <summary>
            Writes a snapshot reflecting the current state of the model to the associated <see cref="T:OrigoDB.Core.ICommandStore"/>
            <remarks>The snapshot is a read operation blocking writes but not other reads (unless using an ImmutablilityKernel).</remarks>
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Engine.Close">
            <summary>
            Shuts down the engine and any associated open resources
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Engine.Load(System.String)">
            <summary>
            Load an engine from the specified location
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:OrigoDB.Core.Engine.Load(OrigoDB.Core.EngineConfiguration)">
            <summary>
            Load an engine from a location specified by the provided EngineConfiguration
            </summary>
            <param name="config"></param>
            <returns>A non generic Engine</returns>
        </member>
        <member name="M:OrigoDB.Core.Engine.Load``1(System.String)">
            <summary>
            Load from location using the default EngineConfiguration
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:OrigoDB.Core.Engine.Load``1(OrigoDB.Core.EngineConfiguration)">
            <summary>
            Load using an explicit configuration.
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:OrigoDB.Core.Engine.Create``1(System.String)">
            <summary>
            Create an engine at the specified location
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="location"></param>
            <returns>The newly created engine</returns>
        </member>
        <member name="M:OrigoDB.Core.Engine.Create``1(OrigoDB.Core.EngineConfiguration)">
            <summary>
            Create by writing a ModelCreated entry to the journal
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:OrigoDB.Core.Engine.Create``1(``0,OrigoDB.Core.EngineConfiguration)">
            <summary>
            Create from an existing model by writing a snapshot
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="model"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:OrigoDB.Core.Engine.LoadOrCreate``1(System.String)">
            <summary>
            Load if exists, otherwise Create and Load.
            </summary>
            <typeparam name="TModel">The type of the model</typeparam>
            <param name="location">The absolute or relative location</param>
            <returns></returns>
        </member>
        <member name="M:OrigoDB.Core.Engine.LoadOrCreate``1(OrigoDB.Core.EngineConfiguration)">
            <summary>
            Load or create the specified type from the
            location according to EngineConfiguration.Location
            </summary>
            <typeparam name="TModel">The type of the model</typeparam>
            <param name="config">The configuration to use</param>
            <returns>A running engine</returns>
        </member>
        <member name="E:OrigoDB.Core.Engine.CommandExecuting">
            <summary>
            Fired just before the command is executed
            </summary>
        </member>
        <member name="E:OrigoDB.Core.Engine.CommandExecuted">
            <summary>
            Fired after the command has successfully executed
            </summary>
        </member>
        <member name="P:OrigoDB.Core.Engine.Config">
            <summary>
            The current configuration
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Db">
            <summary>
            Helper class for obtaining proxy models
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Db.For``1">
            <summary>
            Get a proxy for a given type T based on same conventions as Engine.For&lt;T>
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Db.For``1(System.String)">
            <summary>
            Get a proxy for a given type T based on same conventions as Engine.For&lt;T>
            </summary>
        </member>
        <member name="T:OrigoDB.Core.IImmutable">
            <summary>
            Marker interface for invariably immutable objects
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Merge">
            <summary>
            Helper functions for PartitionClient result merging
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Merge.OrderedArrays``1(``0[][])">
            <summary>
            Merge an array of ordered arrays into a single ordered array
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Merge.OrderedArraysStreamed``1(``0[][])">
            <summary>
            Merge an array of ordered arrays returning an iterator
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Merge.OrderedArraysStreamed``1(``0[][],System.Comparison{``0})">
            <summary>
            Merge an array of ordered arrays using the provided comparer and returning an iterator
            </summary>
        </member>
        <member name="T:OrigoDB.Core.RoyalFoodTaster">
            <summary>
            Keeps an identical copy of the model to try the commands.
            </summary>
        </member>
        <member name="F:OrigoDB.Core.RoyalFoodTaster._foodTaster">
            <summary>
            An identical copy of the model
            </summary>
        </member>
        <member name="M:OrigoDB.Core.RoyalFoodTaster.ExecuteCommand(OrigoDB.Core.Command)">
            <summary>
            Apply the command to the food taster. If it succeeds, apply to the real model.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:OrigoDB.Core.Storage.ByteCountingStream">
            <summary>
            A stream decorator which keeps track of the number of bytes written
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Storage.ByteCountingStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor accepting a writeable stream to decorate
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:OrigoDB.Core.Storage.ByteCountingStream.#ctor">
            <summary>
            Uses an underlying NullWriteStream
            </summary>
        </member>
        <member name="T:OrigoDB.Core.PacketingFormatter">
            <summary>
            Decorator transforming graph to packet
            </summary>
        </member>
        <member name="M:OrigoDB.Core.ResourcePool`1.AquireResource(System.Int32)">
            <summary>
            Aquires a resource
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait for the resource to be aquired, 
            default <see cref="F:System.Threading.Timeout.Infinite"/> (-1) will wait indefinitely.</param>
            <returns></returns>
        </member>
        <member name="M:OrigoDB.Core.Linq.CachingLinqCompiler.BuildArgsInvocation(System.Object[])">
            <summary>
            Cast each args array value from System.Object to the actual type of the value
            </summary>
        </member>
        <member name="P:OrigoDB.Core.Linq.CachingLinqCompiler.ForceCompilation">
            <summary>
            Bypass cache. Mainly so we can run performance tests
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Linq.CompiledLinqExtensions.Execute``1(OrigoDB.Core.Engine{``0},System.String,System.Object[])">
            <summary>
            Execute a LINQ query passed as a string
            </summary>
        </member>
        <member name="P:OrigoDB.Core.Proxy.ProxyMethodAttribute.ResultIsSafe">
            <summary>
            When set to true, tells the engine there is no way to modify the model through references
            contained in the return value nor can the results be modified by a subsequent command.
            <remarks>This is achieved by cloning, returning immutable objects or both</remarks>
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Proxy.ProxyMethodMap">
            <summary>
            Map method names to MethodInfos and user/system metadata
            </summary>
        </member>
        <member name="F:OrigoDB.Core.Proxy.ProxyMethodMap._proxyMethodInfoMap">
            <summary>
            Proxied methods by name
            </summary>
        </member>
        <member name="T:OrigoDB.Core.AsynchronousJournalWriter">
            <summary>
            The actual write to disk is performed by a background thread. The call to Write() adds to a queue and then returns immediately.
            <remarks>Faster response times with a risk of dataloss. Also has the ability to buffer commands when request rates burst</remarks>
            </summary>
        </member>
        <member name="T:OrigoDB.Core.CommandAbortedException">
            <summary>
            Throw this Exception from within Command.Execute(M model) to abort the command.
            An aborted command must not have modified the model.
            <remarks>Throwing any other exception from within Command.Execute() will trigger a rollback, 
            restoring the model to the consistent state prior to the command</remarks>
            </summary>
        </member>
        <member name="M:OrigoDB.Core.CommandAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Needed to deserialize because Exception implements ISerializable
            </summary>
        </member>
        <member name="T:OrigoDB.Core.SynchronizationMode">
            <summary>
            Engine chooses Locking strategy based on this setting
            </summary>
        </member>
        <member name="F:OrigoDB.Core.SynchronizationMode.ReadWrite">
            <summary>
            Allow multiple queries or a single command
            </summary>
        </member>
        <member name="F:OrigoDB.Core.SynchronizationMode.None">
            <summary>
            Allow any access, thread safety is controlled by client code
            </summary>
        </member>
        <member name="F:OrigoDB.Core.SynchronizationMode.Exclusive">
            <summary>
            Allow access to one thread at a time for either reading or writing
            </summary>
        </member>
        <member name="F:OrigoDB.Core.SynchronizationMode.Custom">
            <summary>
            Custom implementation of ISynchronizer is used
            </summary>
        </member>
        <member name="M:OrigoDB.Core.EngineConfiguration.#ctor(System.String)">
            <summary>
            Create an EngineConfiguration instance using default values
            </summary>
            <param name="targetLocation"></param>
        </member>
        <member name="M:OrigoDB.Core.EngineConfiguration.InitSynchronizers">
            <summary>
            Created a named registration for each SynchronizationMode enumeration value
            </summary>
        </member>
        <member name="M:OrigoDB.Core.EngineConfiguration.Create">
            <summary>
            Looks up a custom implementation in app config file
            </summary>
            <returns></returns>
        </member>
        <member name="M:OrigoDB.Core.EngineConfiguration.CreateFormatter(OrigoDB.Core.FormatterUsage)">
            <summary>
            Return an IFormatter by invoking the factory function associated
            with the given FormatterUsage or FormatterUsage.Default if not registered.
            </summary>
            <param name="formatterUsage">The specific formatter</param>
            <returns>An IFormatter instance provided by the </returns>
        </member>
        <member name="M:OrigoDB.Core.EngineConfiguration.CreateSynchronizer">
            <summary>
            Gets a synchronizer based on the SynchronizationMode property
            </summary>
            <returns></returns>
        </member>
        <member name="M:OrigoDB.Core.EngineConfiguration.SetFormatterFactory(System.Func{OrigoDB.Core.EngineConfiguration,OrigoDB.Core.FormatterUsage,System.Runtime.Serialization.IFormatter},OrigoDB.Core.FormatterUsage)">
            <summary>
            Inject a custom IFormatter factory.
            </summary>
            <param name="factory">Function that provides an IFormatter</param>
            <param name="formatterUsage">The usage</param>
        </member>
        <member name="M:OrigoDB.Core.EngineConfiguration.SetCommandStoreFactory(System.Func{OrigoDB.Core.EngineConfiguration,OrigoDB.Core.ICommandStore})">
            <summary>
            Inject your custom storage factory here. StorageMode property will be set to Custom
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:OrigoDB.Core.EngineConfiguration.CreateRolloverStrategy">
            <summary>
            Rollover strategy is used by storage providers that split the journal into segments. The rollover strategy decides
            when to create a new segment.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OrigoDB.Core.EngineConfiguration.AsyncronousJournaling">
            <summary>
            Append journal entries using a background thread
            sacrificing durability under certain circumstances
            for performance.
            </summary>
        </member>
        <member name="P:OrigoDB.Core.EngineConfiguration.PersistenceMode">
            <summary>
            Set's the type of persistence used
            </summary>
        </member>
        <member name="P:OrigoDB.Core.EngineConfiguration.Kernel">
            <summary>
            Choose type of kernel
            </summary>
        </member>
        <member name="P:OrigoDB.Core.EngineConfiguration.PacketOptions">
            <summary>
            If assigned, write <see cref="T:OrigoDB.Core.Packet"/>s to the journal using the options specified.
            Otherwise serialize object graphs directly to the underlying stream
            </summary>
        </member>
        <member name="P:OrigoDB.Core.EngineConfiguration.EnsureSafeResults">
             <summary>
             Engine takes responsibility for ensuring no mutable object references are returned
             by commands or queries. Default is true.
             <remarks>
             Can safely be set to false if one of the following is true:
                1. You are running on a single thread and are certain that client code only reads results.
                2. You have designed every single query and command to not return any references to mutable objects
            </remarks>
             </summary>
        </member>
        <member name="P:OrigoDB.Core.EngineConfiguration.LockTimeout">
            <summary>
            Maximum time to wait for any read or write lock
            </summary>
        </member>
        <member name="P:OrigoDB.Core.EngineConfiguration.SnapshotBehavior">
            <summary>
            When to take automatic snapshots
            </summary>
        </member>
        <member name="P:OrigoDB.Core.EngineConfiguration.Synchronization">
            <summary>
            Effects which ISynchronizer is chosen by CreateSynchronizer()
            </summary>
        </member>
        <member name="P:OrigoDB.Core.EngineConfiguration.MaxEntriesPerJournalSegment">
            <summary>
            Maximum number of journal entries per segment. Applies only to storage 
            providers which split up the journal in segments and ignored by others.
            </summary>
        </member>
        <member name="P:OrigoDB.Core.EngineConfiguration.MaxBytesPerJournalSegment">
            <summary>
            Maximum number of bytes entries per segment. Applies only to storage 
            providers which split up the journal in segments and ignored by others.
            </summary>
        </member>
        <member name="F:OrigoDB.Core.JournalWriterMode.Synchronous">
            <summary>
            Safe but slower
            Journal writer waits for disc write and flush, exceptions are propagated to client.
            </summary>
        </member>
        <member name="F:OrigoDB.Core.JournalWriterMode.Asynchronous">
            <summary>
            High Performance but unsafe, commands can get lost.
            Journal writer runs in the background, disk write time is not included in command execution time.
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Model">
            <summary>
            Derive your model from this class, mark it serializable.
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Model.SnapshotRestored">
            <summary>
            SnapshotRestored is called after the most recent snaphot has been loaded 
            but before any commands are restored.
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Model.JournalRestored">
            <summary>
            This method is called after the model has been restored from 
            persistent storage and before the engine is available for transactions.
            </summary>
        </member>
        <member name="P:OrigoDB.Core.Model.Revision">
            <summary>
            Version of the model, incremented by the Engine
            for each command executed.
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Security.OrigoDBPrincipal">
            <summary>
            A custom IPrincipal implementation using a hashset for fast role membership lookup
            Also, users name is added to the set of roles.
            </summary>
        </member>
        <member name="T:OrigoDB.Core.JournalFile">
            <summary>
            Represents a journal file name. The name is composed of the 
            file sequence number and the id of the first journal entry in the file
            </summary>
        </member>
        <member name="F:OrigoDB.Core.JournalFile.StartingEntryId">
            <summary>
            Id of the first journal entry in the file
            </summary>
        </member>
        <member name="F:OrigoDB.Core.JournalFile.FileSequenceNumber">
            <summary>
            sequence number of the file.
            </summary>
        </member>
        <member name="P:OrigoDB.Core.JournalFile.Name">
            <summary>
            File name without path information
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Utilities.NonDestructiveArrayQueue`1">
            <summary>
            Provides the ability to iterate an array in a queue like manner.
            Saves memory compared to using new Queue(array)
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Packet">
            <summary>
            Container for bytes to be written to the journal, takes options when
            <remarks>
            Header format:
            1. Byte   : PacketOptions
            2. Int32  : Number of payload bytes
            3. Byte[] : Payload bytes
            4. Int16  : Number of Checksum bytes. Optional, only when using Checksums
            5. Byte[] Checksum bytes. Optional, only when using Checksums
            </remarks>
            </summary>
        </member>
        <member name="F:OrigoDB.Core.SnapshotBehavior.None">
            <summary>
            No automatic snapshots
            </summary>
        </member>
        <member name="F:OrigoDB.Core.SnapshotBehavior.AfterRestore">
            <summary>
            Take a snapshot when engine is loaded
            </summary>
        </member>
        <member name="F:OrigoDB.Core.SnapshotBehavior.OnShutdown">
            <summary>
            Take a snaphot when the engine is shutting down
            </summary>
        </member>
        <member name="F:OrigoDB.Core.JournalEntry.Id">
            <summary>
            Corresponds to the <see cref="P:OrigoDB.Core.Model.Revision"/> resulting after this entry is applied
            </summary>
        </member>
        <member name="T:OrigoDB.Core.ReadWriteSynchronizer">
            <summary>
            Wrapper for System.Threading.ReaderWriterLockSlim class
            </summary>
        </member>
        <member name="T:OrigoDB.Core.ExclusiveSynchronizer">
            <summary>
            Single thread at a time for either reading or writing. 
            Use for baseline performance testing to be compared with concurrent reading
            </summary>
        </member>
        <member name="T:OrigoDB.Core.FileCommandStore">
            <summary>
            File system based Storage implementation
            </summary>
        </member>
        <member name="M:OrigoDB.Core.FileCommandStore.Initialize">
            <summary>
            Read journal files
            </summary>
        </member>
        <member name="M:OrigoDB.Core.FileCommandStore.CreateJournalWriterStream(System.UInt64)">
            <summary>
            Create a new journal writer stream. The first entry written to the 
            stream will have the specified sequenceNumber
            </summary>
            <returns>An open stream</returns>
        </member>
        <member name="T:OrigoDB.Core.StreamJournalWriter">
            <summary>
            Serializes journal entries to a stream, flushing after each write
            </summary>
        </member>
        <member name="T:OrigoDB.Core.Utilities.HashUtility">
            <summary>
            Utility class to hash strings and verify hashes using the SHA512 algorithm
            </summary>
        </member>
        <member name="M:OrigoDB.Core.Utilities.HashUtility.CreateHashWithRandomSalt(System.String,System.Int32)">
            <summary>
            Generate a hash of the provided string using the SHA512 algorithm. 
            Random salt bytes are appended to the hash
            </summary>
            <param name="plainText">The string to hash</param>
            <param name="saltLength">the length of the random salt byte array, see <see cref="F:OrigoDB.Core.Utilities.HashUtility.DefaultSaltLength"/></param>
            <returns>A hash of the provided plainText with the salt appended</returns>
        </member>
        <member name="M:OrigoDB.Core.Utilities.HashUtility.Verify(System.String,System.String,System.Int32)">
            <summary>
            Verifys that a hash was created from a given plaintext string.
            </summary>
            <param name="plainText"></param>
            <param name="hash"></param>
            <param name="saltLength"></param>
            <returns>true if the hash could be created from the plaintext</returns>
        </member>
    </members>
</doc>
